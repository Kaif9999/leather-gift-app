// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  cart          Cart?
}

model Product {
  id            String    @id @default(uuid())
  name          String
  slug          String    @unique
  description   String
  price         Float
  images        String[]
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  featured      Boolean   @default(false)
  inStock       Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Category {
  id            String    @id @default(uuid())
  name          String    @unique
  slug          String    @unique
  description   String?
  image         String?
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Cart {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique
  items         CartItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CartItem {
  id            String    @id @default(uuid())
  cart          Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId        String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  quantity      Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  items         OrderItem[]
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  paymentId     String?
  address       Address?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model OrderItem {
  id            String    @id @default(uuid())
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  name          String
  price         Float
  quantity      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Address {
  id            String    @id @default(uuid())
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String    @unique
  street        String
  city          String
  state         String
  postalCode    String
  country       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}